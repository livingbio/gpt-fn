# serializer version: 1
# name: test_function_signature[add-args0-kwargs0]
  '''
  You are now the following python function:
  ```
  # Add two numbers.
  def add(a: int, b: int = 10):
  ```
  Only respond with your `return` value.
  The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "integer"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[add-args0-kwargs0].1
  'add(1, 2)'
# ---
# name: test_function_signature[add-args0-kwargs0].2
  dict({
    'description': 'Add two numbers.',
    'name': 'add',
    'parameters': dict({
      'additionalProperties': False,
      'properties': dict({
        'a': dict({
          'title': 'A',
          'type': 'integer',
        }),
        'args': dict({
          'items': dict({
          }),
          'title': 'Args',
          'type': 'array',
        }),
        'b': dict({
          'default': 10,
          'title': 'B',
          'type': 'integer',
        }),
        'kwargs': dict({
          'title': 'Kwargs',
          'type': 'object',
        }),
        'v__duplicate_kwargs': dict({
          'items': dict({
            'type': 'string',
          }),
          'title': 'V  Duplicate Kwargs',
          'type': 'array',
        }),
      }),
      'required': list([
        'a',
      ]),
      'title': 'Add',
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[complex-args5-kwargs5]
  '''
  You are now the following python function:
  ```
  # Complex function
  def complex(a: str, b: str, *args: str, c: str, d: str, **kwargs: str):
  ```
  Only respond with your `return` value.
  The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[complex-args5-kwargs5].1
  "complex('a-v', 'b-v', 'arg-v1', 'arg-v2', c='c-v', d='d-v', kwarg1='kwarg1-v', kwarg2='kwarg2-v')"
# ---
# name: test_function_signature[complex-args5-kwargs5].2
  dict({
    'description': 'Complex function',
    'name': 'complex',
    'parameters': dict({
      'additionalProperties': False,
      'properties': dict({
        'a': dict({
          'title': 'A',
          'type': 'string',
        }),
        'args': dict({
          'items': dict({
            'type': 'string',
          }),
          'title': 'Args',
          'type': 'array',
        }),
        'b': dict({
          'title': 'B',
          'type': 'string',
        }),
        'c': dict({
          'title': 'C',
          'type': 'string',
        }),
        'd': dict({
          'title': 'D',
          'type': 'string',
        }),
        'kwargs': dict({
          'additionalProperties': dict({
            'type': 'string',
          }),
          'title': 'Kwargs',
          'type': 'object',
        }),
        'v__duplicate_kwargs': dict({
          'items': dict({
            'type': 'string',
          }),
          'title': 'V  Duplicate Kwargs',
          'type': 'array',
        }),
      }),
      'required': list([
        'a',
        'b',
        'c',
        'd',
      ]),
      'title': 'Complex',
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[concat-args2-kwargs2]
  '''
  You are now the following python function:
  ```
  # Concat two strings
  def concat(a: str, b: str):
  ```
  Only respond with your `return` value.
  The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[concat-args2-kwargs2].1
  "concat('pen', 'apple')"
# ---
# name: test_function_signature[concat-args2-kwargs2].2
  dict({
    'description': 'Concat two strings',
    'name': 'concat',
    'parameters': dict({
      'additionalProperties': False,
      'properties': dict({
        'a': dict({
          'title': 'A',
          'type': 'string',
        }),
        'args': dict({
          'items': dict({
          }),
          'title': 'Args',
          'type': 'array',
        }),
        'b': dict({
          'title': 'B',
          'type': 'string',
        }),
        'kwargs': dict({
          'title': 'Kwargs',
          'type': 'object',
        }),
        'v__duplicate_kwargs': dict({
          'items': dict({
            'type': 'string',
          }),
          'title': 'V  Duplicate Kwargs',
          'type': 'array',
        }),
      }),
      'required': list([
        'a',
        'b',
      ]),
      'title': 'Concat',
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[concat-args3-kwargs3]
  '''
  You are now the following python function:
  ```
  # Concat two strings
  def concat(a: str, b: str):
  ```
  Only respond with your `return` value.
  The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[concat-args3-kwargs3].1
  'concat("a\'b", \'cd\')'
# ---
# name: test_function_signature[concat-args3-kwargs3].2
  dict({
    'description': 'Concat two strings',
    'name': 'concat',
    'parameters': dict({
      'additionalProperties': False,
      'properties': dict({
        'a': dict({
          'title': 'A',
          'type': 'string',
        }),
        'args': dict({
          'items': dict({
          }),
          'title': 'Args',
          'type': 'array',
        }),
        'b': dict({
          'title': 'B',
          'type': 'string',
        }),
        'kwargs': dict({
          'title': 'Kwargs',
          'type': 'object',
        }),
        'v__duplicate_kwargs': dict({
          'items': dict({
            'type': 'string',
          }),
          'title': 'V  Duplicate Kwargs',
          'type': 'array',
        }),
      }),
      'required': list([
        'a',
        'b',
      ]),
      'title': 'Concat',
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[concats-args4-kwargs4]
  '''
  You are now the following python function:
  ```
  # Concat the given strings
  def concats(*args: str):
  ```
  Only respond with your `return` value.
  The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[concats-args4-kwargs4].1
  "concats('a', 'b', 'c', 'd')"
# ---
# name: test_function_signature[concats-args4-kwargs4].2
  dict({
    'description': 'Concat the given strings',
    'name': 'concats',
    'parameters': dict({
      'additionalProperties': False,
      'properties': dict({
        'args': dict({
          'items': dict({
            'type': 'string',
          }),
          'title': 'Args',
          'type': 'array',
        }),
        'kwargs': dict({
          'title': 'Kwargs',
          'type': 'object',
        }),
      }),
      'title': 'Concats',
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[fake_person-args1-kwargs1]
  '''
  You are now the following python function:
  ```
  # generate fake person.
  def fake_person(count: int):
  ```
  Only respond with your `return` value.
  The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  Here is the output schema:
  ```
  {"properties": {"ret": {"$ref": "#/definitions/Person"}}, "required": ["ret"], "definitions": {"Person": {"title": "Person", "description": "Person model.", "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "age": {"title": "Age", "type": "integer"}}, "required": ["name", "age"]}}}
  ```
  
  '''
# ---
# name: test_function_signature[fake_person-args1-kwargs1].1
  'fake_person(5)'
# ---
# name: test_function_signature[fake_person-args1-kwargs1].2
  dict({
    'description': 'generate fake person.',
    'name': 'fake_person',
    'parameters': dict({
      'additionalProperties': False,
      'properties': dict({
        'args': dict({
          'items': dict({
          }),
          'title': 'Args',
          'type': 'array',
        }),
        'count': dict({
          'title': 'Count',
          'type': 'integer',
        }),
        'kwargs': dict({
          'title': 'Kwargs',
          'type': 'object',
        }),
        'v__duplicate_kwargs': dict({
          'items': dict({
            'type': 'string',
          }),
          'title': 'V  Duplicate Kwargs',
          'type': 'array',
        }),
      }),
      'required': list([
        'count',
      ]),
      'title': 'FakePerson',
      'type': 'object',
    }),
  })
# ---
